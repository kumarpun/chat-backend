"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const select_fields_1 = require("../select-fields");
class ContextRunnerImpl {
    constructor(builder, selectFields = select_fields_1.selectFields) {
        this.builder = builder;
        this.selectFields = selectFields;
    }
    run(req) {
        return __awaiter(this, void 0, void 0, function* () {
            const context = this.builder.build();
            const instances = this.selectFields(req, context.fields, context.locations);
            context.addFieldInstances(instances);
            for (const contextItem of context.stack) {
                const promises = context
                    .getData({
                    // Data not provided in optional contexts shouldn't be validated.
                    requiredOnly: contextItem.kind === 'validation',
                })
                    .map(instance => contextItem.run(context, instance.value, {
                    req,
                    location: instance.location,
                    path: instance.path,
                }));
                yield Promise.all(promises);
            }
            return context;
        });
    }
}
exports.ContextRunnerImpl = ContextRunnerImpl;
